<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

// Parameters
LEVEL_TIMER = 60; // seconds
LIVES = 3;
CLICK_CD = 0.5 // seconds

// Global paramters
global.MAX_DOTS = 100;
global.PATH_DOT_CHANCE = 0.01;
global.DOT_TYPE_NUM = 2; // 0: GA, 1: pathfinding
global.MAX_DOT_SPEED = 10;
global.GA_MUTATION_OPERATIONS = 10;
global.GA_GOAL_FITNESS_BOOST = 1800;
global.GA_DIST_MULTIPLIER = room_width;
global.GA_MAX_MOVE_LENGTH = room_width;
global.GA_EXECUTE_TIME = 10; // Kill dots if longer than this


// Global variables
health = LIVES;
global.can_click = true;
global.best_ga_fitness = 0; // higher fitness is better
global.best_ga_direction = ds_list_create();
global.best_ga_mov_length = ds_list_create();

// Local variables
timer = LEVEL_TIMER;
click_cd_count = CLICK_CD * room_speed;
click_cd_set = false;
keep_going = false;

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>timer - 1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (timer &lt; 0)
{
    // Level is done!
    if (room_exists(room + 1))
    {
        timer = LEVEL_TIMER;
        room_goto_next();
    }
    else
    {
        if (show_question("You beat the game! Restart?"))
            game_restart();
        else
            game_end();
    }   
}

if (click_cd_set)
{
    if (click_cd_count &gt;= CLICK_CD * room_speed)
    {
        global.can_click = true;
        click_cd_set = false;
    }
    else
        ++click_cd_count;
}

if (health &lt;= 0 &amp;&amp; !keep_going)
{
    if (show_question("You lost! But since we're testing, keep going?"))
        keep_going = true;
    else
        game_end();
}

if (!global.can_click &amp;&amp; !click_cd_set)
{
    click_cd_set = true;
    click_cd_count = 0;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for (i = 0; i &lt; health; ++i)
{
    draw_sprite(sp_heart, 0, room_width - LIVES * sprite_get_width(sp_heart) + i * sprite_get_width(sp_heart), 0);
}

draw_set_colour(c_black);
draw_set_font(fnt_gui);
draw_text(0, 0, string(timer));

draw_set_colour(c_black);
draw_rectangle(84, 2, room_width - LIVES * sprite_get_width(sp_heart)- 20, 61, true);
draw_set_colour(c_orange);
draw_rectangle(85, 3, (click_cd_count / (CLICK_CD * room_speed)) * (room_width - LIVES * sprite_get_width(sp_heart) - 21 - 85) + 85, 60, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
